1. def threeSumClosest(nums: list[int], target: int) -> int:
    nums.sort() 

    maxsum = 10000000

    for i in range(len(nums)-2):
        p1 = i+1
        p2 = len(nums)-1

        while p1 < p2 :
            sum_now = nums[i] + nums[p1] + nums[p2]
            
            if sum_now == target:
                return sum_now
            
            if abs(target-sum_now) < abs(target-maxsum):
                maxsum = sum_now

            if sum_now < target:
                p1 += 1
            else:
                p2 -= 1
    
    return maxsum

2. def fourSum(nums: list[int], target: int) -> list[list[int]]:
    quarts = set()
    summap = dict()
    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
            twosum = nums[i] + nums[j]

            if twosum not in summap:
                summap[twosum] = [(i, j)]
            else:
                summap[twosum] += [(i,j)]

    for i in range(len(nums)-1):
        for j in range(i+1, len(nums)):
            rem = target - nums[i]-nums[j]

            if rem in summap:
                pairs = summap[rem]

                for pair in pairs:
                    if pair[0] != i and pair[0] != j and pair[-1] != i and pair[-1] != j:
                        element = [nums[pair[0]], nums[pair[1]], nums[i], nums[j]]
                        element.sort()
                        quarts.add(tuple(element))
    
    return [list(x) for x in quarts]

3. def nextPermutation(nums: list[int]) -> None:
    i = len(nums) - 2
    while i >= 0 and nums[i + 1] <= nums[i]:
        i -= 1
    if i >= 0:
        j = len(nums) - 1
        while nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]
    reverse(nums, i + 1)
    return nums
 
def reverse(nums, start):
    i, j = start, len(nums) - 1
    while i < j:
        nums[i], nums[j] = nums[j], nums[i]
        i += 1
        j -= 1 

4. def searchInsert(nums: list[int], target: int) -> int:
    l = 0
    r = len(nums) - 1

    while l <= r:
        mid = l + (r-l)//2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            l = mid + 1
        elif nums[mid] > target:
            r = mid - 1

    return l

5. def plusOne(digits: list[int]) -> list[int]:
    n = len(digits)
    num = 0
    for i in range(n):
        power = n - i - 1
        num += digits[i]*10**power

    num += 1

    return [int(x) for x in str(num)]

6. def singleNumber(nums: list[int]) -> int:
    return 2*sum(set(nums)) - sum(nums)

7. def summaryRanges(nums: list[int], lower: int, upper: int) -> list[int]:
    res = []

    if upper < nums[0] or lower > nums[-1]:
        return [[lower, upper]]

    ranges = []
    c = 0

    for i in range(lower, upper+1):
        if c == 0 and i not in nums:
            ranges.append(i)
            c += 1
        elif c > 0 and i not in nums:
            if i == upper:
                ranges.append(i)
                res.append(ranges)
            else:
                c += 1
        elif c > 0 and i in nums:
            ranges.append(i-1)
            res.append(ranges)
            ranges = []
            c = 0
    return res

8. def canAttendMeetings(intervals: list[list[int]]) -> bool:
    # Sort meeting times by their end times
    intervals.sort(key=lambda x: x[-1])

    # We compare whether a meeting's end time is greater than 
    # the next meeting's start time or not
    # If yees, return False,
    # Else, return True
    for i in range(len(intervals)-1):
        if intervals[i][1] > intervals[i+1][0]:
            return False
    
    return True